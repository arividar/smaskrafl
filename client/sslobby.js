// Generated by CoffeeScript 2.7.0
(function() {
  var ClientState, handleInviteRequest, handleInviteResponse, handleLoginFail, handleNewPlayer, handlePlayerList, handleRemovePlayer, login, myName, myState, pendingInviteToPlayer, playerList, playerListToHtml, root, sendInviteResponse, sendPlayerInvite, showPlayerList, socket, typeAndContent;

  socket = myName = playerList = pendingInviteToPlayer = null;

  ClientState = {
    NOT_LOGGED_IN: 0,
    IN_LOBBY: 1,
    INVITE_SENT: 2,
    INVITE_RECEIVED: 3,
    READY_TO_PLAY: 4
  };

  myState = ClientState.NOT_LOGGED_IN;

  typeAndContent = function(message) {
    var content, ignore, type;
    [ignore, type, content] = message.match(/(.*?):(.*)/);
    return {type, content};
  };

  handleLoginFail = function() {
    return $("#ssLogin").append("<h2>******* LOGIN FAILED!</h2>");
  };

  handlePlayerList = function(plist) {
    if (myState !== ClientState.NOT_LOGGED_IN) {
      console.log(`************ ERROR: Wrong state at playerList: ${myState}`);
      return;
    }
    playerList = plist.split(',');
    $("#ssLogin").remove();
    showPlayerList();
    return myState = ClientState.IN_LOBBY;
  };

  handleNewPlayer = function(pname) {
    return showPlayerList(JSON.parse(pname));
  };

  handleRemovePlayer = function(pname) {
    var i, playerName;
    console.log(`******** removePlayer ${pname}`);
    playerName = JSON.parse(pname);
    i = playerList.indexOf(playerName);
    if (i >= 0) {
      playerList.splice(i, 1);
    }
    return showPlayerList();
  };

  login = function(uname) {
    myName = uname;
    socket = io.connect();
    // Set up event listeners for modern Socket.IO
    socket.on('loginFail', handleLoginFail);
    socket.on('playerList', handlePlayerList);
    socket.on('newPlayer', handleNewPlayer);
    socket.on('removePlayer', handleRemovePlayer);
    socket.on('inviteFrom', handleInviteRequest);
    socket.on('inviteResponse', handleInviteResponse);
    return socket.emit('login', {
      playername: uname
    });
  };

  showPlayerList = function(pname) {
    console.log(`******* showing playerlisthtml: ${playerListToHtml(playerList)}`);
    if (pname != null) {
      playerList.push(pname);
    }
    $('#ssLobby').show();
    return $('#playerList').html(playerListToHtml(playerList));
  };

  playerListToHtml = function(plist) {
    var j, len, player, playerHtml, plistHtml, ref;
    plistHtml = '';
    ref = plist.sort();
    for (j = 0, len = ref.length; j < len; j++) {
      player = ref[j];
      if (player !== myName) {
        playerHtml = `<a href=\"javascript:sendPlayerInvite(\'${player}\')\">${player}</a>`;
        if (plistHtml === '') {
          plistHtml = playerHtml;
        } else {
          plistHtml = `${plistHtml}, ${playerHtml}`;
        }
      }
    }
    return plistHtml;
  };

  handleInviteRequest = function(fromPlayer) {
    if (myState !== ClientState.IN_LOBBY) {
      console.log(`****** got invite from ${fromPlayer} but not in IN_LOBBY State`);
      socket.emit('inviteResponse', 'no');
      return;
    }
    myState = ClientState.INVITE_RECEIVED;
    console.log(`****** got invite from ${fromPlayer}`);
    console.log("****** javascript response: " + `<h3><a href=\"javascript:sendInviteResponse(false, \'${fromPlayer}\'))\">Nei</a></h3>`);
    $('#ssLobby').html(`<h2>${fromPlayer} vill spila við þig. Viltu spila?</h2>`);
    $('#ssLobby').append(`<h3><a href=\"javascript:sendInviteResponse(true, \'${fromPlayer}\')\">Já</a></h3>`);
    return $('#ssLobby').append(`<h3><a href=\"javascript:sendInviteResponse(false, \'${fromPlayer}\')\">Nei</a></h3>`);
  };

  handleInviteResponse = function(response) {
    if (myState !== ClientState.INVITE_SENT || (pendingInviteToPlayer == null)) {
      console.log(`******* ERROR: got invite response but state not INVITE_SENT. Player invited: ${pendingInviteToPlayer}`);
      $('#ssLobby').html(`<h1>ERROR - got initation response when no invite sent! ${pendingInviteToPlayer}</h1>`);
      showPlayerList();
      pendingInviteToPlayer = null;
      myState = ClientState.IN_LOBBY;
      return;
    }
    if (response !== 'yes') {
      console.log(`****** got invite decline from ${pendingInviteToPlayer}`);
      $('#ssLobby').html(`<h1>INVITE DECLINED BY ${pendingInviteToPlayer}</h1>`);
      showPlayerList();
      pendingInviteToPlayer = null;
      myState = ClientState.IN_LOBBY;
      return;
    }
    // Invitation response is 'yes':
    console.log(`****** got invite accepted from ${pendingInviteToPlayer}  - should redirect to ssClient`);
    $('#ssLobby').html(`<h1>INVITE FROM ${pendingInviteToPlayer} ACCEPTED</h1>`);
    self.location = `game.html?player=${myName}&opponent=${pendingInviteToPlayer}`;
    showPlayerList();
    pendingInviteToPlayer = null;
    return myState = ClientState.READY_TO_PLAY;
  };

  sendInviteResponse = function(yesIWantToPlay, opponent) {
    if (myState !== ClientState.INVITE_RECEIVED) {
      console.log('************ ERROR - should be INVITE_RECEIVED');
      $('#ssLobby').html(`<h1>ERROR - should be INVITE_RECEIVED ${pendingInviteToPlayer}</h1>`);
      return;
    }
    if (yesIWantToPlay) {
      console.log('********** YES I will play - redirect to ssClient');
      $('#ssLobby').html("<h1>YES will play");
      myState = ClientState.READY_TO_PLAY;
      socket.emit('inviteResponse', 'yes');
      return self.location = `game.html?player=${myName}&opponent=${opponent}`;
    } else {
      console.log('********** NO I will not play');
      $('#ssLobby').html("<h1>NO will play");
      myState = ClientState.IN_LOBBY;
      return socket.emit('inviteResponse', 'no');
    }
  };

  sendPlayerInvite = function(toPlayer) {
    console.log(`****** sending invite to ${toPlayer}`);
    $('#ssLobby').html(`<h1>SENT INVITE TO ${toPlayer}</h1>`);
    pendingInviteToPlayer = toPlayer;
    myState = ClientState.INVITE_SENT;
    return socket.emit("invite", toPlayer);
  };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.login = login;

  root.sendPlayerInvite = sendPlayerInvite;

  root.sendInviteResponse = sendInviteResponse;

}).call(this);
